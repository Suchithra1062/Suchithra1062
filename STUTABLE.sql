SHOW DATABASES;
CREATE DATABASE STDDB;
CREATE DATABASE BESANTDB;
SELECT DATABASE();
USE BESANTDB;
USE STDDB;
DROP DATABASE BESANTDB;
START TRANSACTION;
CREATE TABLE STUDENTINFO(ID INT PRIMARY KEY AUTO_INCREMENT,
NAME VARCHAR(50) NOT NULL,
AGE INT CHECK(AGE>18),
MAIL_ID VARCHAR(60) UNIQUE ,
COURSE CHAR(2) DEFAULT "DS");
SHOW TABLES;
DESCRIBE STUDENTINFO;
SELECT * from STUDENTINFO;
ALTER TABLE STUDENTINFO ADD COLUMN QLF VARCHAR(10) AFTER NAME;
ALTER TABLE STUDENTINFO ADD COLUMN COURSEFEE FLOAT;
ALTER TABLE STUDENTINFO DROP COLUMN QLF;
ALTER TABLE STUDENTINFO RENAME COLUMN MAIL_ID TO EMAIL_ID;
ALTER TABLE STUDENTINFO MODIFY COLUMN NAME VARCHAR(60);
ALTER TABLE STUDENTINFO MODIFY COLUMN AGE FLOAT;
ALTER TABLE STUDENTINFO MODIFY COLUMN AGE INT;
DROP TABLE STUDENTINFO;
ALTER TABLE STUDENTINFO DROP COLUMN COURSEFEE;
ALTER TABLE STUDENTINFO ADD COLUMN DOJ DATE;
INSERT INTO STUDENTINFO VALUES(1,"JOE",19,"JOE@GMAIL.COM","DS","2024-03-20");
INSERT INTO STUDENTINFO(NAME,MAIL_ID,AGE,COURSE,DOJ)
 VALUES("FRANK","FRANK@GAMIL.COM",26,"FS","2024-05-05");
INSERT INTO STUDENTINFO(NAME,MAIL_ID)
 VALUES("RAMYA","XYZs@GMAIL.COM");
UPDATE STUDENTINFO SET AGE=30 WHERE ID=2;
UPDATE STUDENTINFO SET NAME="ABC" WHERE ID=4;
DELETE FROM STUDENTINFO WHERE ID=3;
TRUNCATE TABLE STUDENTINFO;
INSERT INTO STUDENTINFO VALUES(1,"SUCHI",19,"SUCHI@GMAIL.COM","CS");
INSERT INTO STUDENTINFO(NAME,AGE,MAIL_ID,COURSE)
 VALUES("BRUNDA",20,"BRU@GMAIL.COM","DA");
COMMIT;
SAVEPOINT DEL1;
DELETE FROM STUDENTINFO
WHERE ID=1;
ROLLBACK TO DEL1;
----------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM SALESDATA;
SELECT CITY,QTY FROM SALESDATA;
SELECT REGION,DATE,UNITPRICE FROM SALESDATA;
SELECT * FROM SALESDATA 
WHERE CITY="BOSTON";
SELECT * FROM SALESDATA
WHERE QTY>200;
SELECT * FROM SALESDATA
WHERE CITY<>"BOSTON";
SELECT * FROM SALESDATA
WHERE CITY!="BOSTON";

SELECT * FROM SALESDATA
WHERE  QTY>200 AND CITY="BOSTON";
SELECT * FROM SALESDATA
WHERE UNITPRICE>2.5 AND CITY="NEW YORK";
SELECT * FROM SALESDATA
WHERE REGION="EAST" OR CITY="BOSTON";
SELECT * FROM SALESDATA
WHERE CITY="BOSTON" OR CITY="NEW YORK";
SELECT * FROM SALESDATA 
WHERE QTY>150 AND QTY<200;
SELECT * FROM SALESDATA 
WHERE (REGION="EAST" OR CITY="NEW YORK") AND QTY>200;
SELECT * FROM SALESDATA
WHERE NOT CITY="NEW YORK";
SELECT * FROM SALESDATA
WHERE CITY="BOSTON" OR CITY="NEW YORK" OR CITY="LOS ANGELES";
SELECT * FROM SALESDATA WHERE CITY IN ("BOSTON","NEW YORK","LOS ANGELES");
-- WRITE A QUERRY TO GET THE VALUES BETWEEN 50 AND 100
SELECT * FROM SALESDATA
WHERE QTY BETWEEN 50 AND 100;
SELECT * FROM SALESDATA
WHERE DATE BETWEEN "2022-01-01" AND "2022-01-31";
SELECT * FROM SALESDATA
WHERE CITY LIKE "B%";
-- WRITE A QUERRY TO GET VALUE THE CITY END WITH K
SELECT * FROM SALESDATA
WHERE CITY LIKE "%K";
-- WRITE A QUERRY TO GET ALL THE DATA WHERE THE CITY START WITH L AND END WITH s
SELECT * FROM SALESDATA
WHERE CITY LIKE "L%S";
-- WRITE A QUERRY TO GET ALL THE DATA WHERE THE CITY CONTAINS O
SELECT * FROM SALESDATA
WHERE CITY LIKE "%O%";
-- WRITE A QUERRY TO GET ALL THE DATA WHERE THE CITY CONTAINS O IN SECOND POSITION
SELECT * FROM SALESDATA
WHERE CITY LIKE "_O%";
-- WRITE A QUERRY TO GET ALL THE DATA WHERE THE CITY CONTAINS "E" AT LAST 2ND POSITION
SELECT * FROM SALESDATA
WHERE CITY LIKE "%E_";

SELECT * FROM SALESDATA;
-- WRITE A QUERRY TO GET ALL THE DATA WHERE THE REGION SATART WITH E AND CITY END WITH N
SELECT * FROM SALESDATA
WHERE REGION LIKE "E%" AND CITY LIKE "%N";
-- WRITE A QUERRY TO GET ALL THE DATA WHERE THE QTY SHOULD BE CONTAIN  3 DIGIT
SELECT * FROM SALESDATA
WHERE QTY LIKE "___";
-- WRITE A QUERRY TO GET ALL THE DATA WHERE THE QTY SHOULD BE
SELECT * FROM SALESDATA
WHERE QTY LIKE "__%";
-- WRITE A QUERRY TO GET ALL THE DATA WHERE THE LENGTH OF CITY SHOULD BE GREATER THAN 6
SELECT * FROM SALESDATA
WHERE CITY LIKE "______%";
-- WRITE A QUERRY TO GET NULL VALUES IN ID COLOUM
SELECT * FROM SALESDATA
WHERE ID IS NULL;
-- WRITE A QUERRY TO GET ALL THE DATA EXCEPT NULL VALUES IN ID COLUMN
SELECT * FROM SALESDATA
WHERE ID IS NOT NULL;
SELECT coalesce(NULL,0);
SELECT * FROM SALESDATA
ORDER BY QTY DESC;
-- WRITE A QUERRY TO GET ALL THE DATA WHERE CITY SHOULD BE ALPHEBTICAL ORDER
SELECT * FROM SALESDATA
ORDER BY CITY ASC;
-- WRITE A QUERRY BOSTON DATA SORT TO HIGHEST TO LOWEST
SELECT * FROM SALESDATA
WHERE CITY="BOSTON" 
ORDER BY UNITPRICE DESC;
-- WRITE A QUERRY TO GET ALL THE DATA WHERE THE QTY SHOULD BE HIGHTEST TO LOWEST WHERE CITY SHOLUD BE ALBETICAL ORDER
SELECT * FROM SALESDATA
ORDER BY QTY DESC,CITY ASC;
SELECT * FROM SALESDATA
LIMIT 4;
-- WRITE A QUERRY TO GET ALL THE BOTTOM 5 RECORDS
SELECT * FROM SALESDATA
ORDER BY ID DESC
LIMIT 4;
-- WRITE A QUERRY TO GET 5 RECORD FROM BOSTON
SELECT * FROM SALESDATA
WHERE CITY="BOSTON"
LIMIT 5;
-- WRITE A QUERRY TO GET TOP TWO HIGHEST  QTY IN NEW YORK
SELECT * FROM SALESDATA
WHERE CITY="NEW YORK"
ORDER BY QTY DESC
LIMIT 2;
-- WRITE A QUERRY TO GET TOP LOWEST 5 QTY HOLD IN BOSTON
SELECT * FROM SALESDATA
WHERE CITY="BOSTON"
ORDER BY QTY ASC
LIMIT 5;
-- WRITE A QUERRY TO GET 3RD HIGHEST QTY FROM BOSTON
SELECT * FROM SALESDATA
WHERE CITY="BOSTON"
ORDER BY QTY DESC
LIMIT 2,1;
-- WRITE A QUERRY TO GET 5TH LOWEST RECORD FROM NEW YORK
SELECT * FROM SALESDATA
WHERE CITY="NEW YORK"
ORDER BY QTY ASC
LIMIT 4,1; 
-- WRITE A QUERRY TO GET THE UNIQUE DATA PRESENT IN THE CITY COLUMN
SELECT DISTINCT CITY FROM SALESDATA;
-- WRITE A QUERRY TO GET THE UNIQUE DATA FROM OUR ENTIRE TABLE
SELECT DISTINCT * FROM SALESDATA;
-------------------------------------------------------------------------------------------------------------------------------------------------------
----------------- AGGREGATE FUNCTION ---------------------------
-- WRITE A QUERRY TO GET TOTAL NUMBER OF RECORD PRESENT IN OUR TABLE
SELECT COUNT(*) FROM SALESDATA;
-- WRITE A QUERRY TO GET TOTAL NUMBER OF RECORD PRESENT IN BOSTON
SELECT COUNT(*) FROM SALESDATA
WHERE CITY="BOSTON";
-- WRITE A QUERRY TO GET TOTAL NUMBER OF RECORDS WHERE QTY GREATER 200 IN NEW YORK
SELECT COUNT(*) FROM SALESDATA
WHERE CITY="NEW YORK" AND QTY>200;
-- WRITE A QUERRY TO CALCULATE TOTAL QTY PRESENT IN OUR COLUMN
SELECT SUM(QTY) AS TOTAL_QTY FROM SALESDATA; 
-- WRITE A QUERRY TO GET THE QTY AS A QUANTITY
SELECT QTY AS QUANTITY FROM SALESDATA;
-- WRITE A QUERRY TO GET TOTAL NUMBER OF QTY HOLD IN NEW YORK
SELECT SUM(QTY) FROM SALESDATA
WHERE CITY="NEW YORK";

-- WRITE A QUERRY TO GET THE MAXIMUM QTY PRESENT IN QUANTITY COLUMN
SELECT MAX(QTY) FROM SALESDATA;
-- WRITE A QUERRY TO GET THE MAXIMUM QTY PRESENT IN QUANTITY BOSTON
SELECT MAX(QTY) FROM SALESDATA
WHERE CITY="BOSTON";
-- WRITE A QUEERRY TO GET LATEST DATE PRESENT IN THE COLUMN
SELECT MAX(DATE)AS LATEST_DATE FROM SALESDATA;
-- WRITE A QUEERY TO GET EARLYEST DATE FROM THE TABLE
SELECT MIN(DATE) AS EARLIEST_DATE FROM SALESDATA;
-- WRITE QUERRY TO GET MIN QTY HOLD IN NEW YORK
SELECT MIN(QTY) FROM SALESDATA
WHERE CITY="NEW YORK";
-- CALCULATE AVG OF QUANTITY IN THE COLUMN
SELECT AVG(QTY) FROM SALESDATA;
-- WRITE A QUERRY TO GET AVG OF UNITPRICE FROM CITY BOSTON
SELECT AVG(UNITPRICE) FROM SALESDATA
WHERE CITY="BOSTON";
-- WRITE A QUERRY TO GET TOTAL QTY CITY WISE
SELECT CITY,SUM(QTY) AS TOTAL_QTY FROM SALESDATA
GROUP BY CITY;
-- WRITE A QUERRY TO GET COUNT OF RECORD EACH REGION
SELECT REGION,COUNT(*) AS TOTAL_REC FROM SALESDATA
GROUP BY REGION;
-- WRITE A QUERRY TO GET MAX QTY HOLD IN CITY WISE
SELECT CITY,MAX(QTY) AS MAX_QTY FROM SALESDATA GROUP BY CITY;
-- WRITE A QUERRY TOGET TOP SECOND  HIGHEST QTY HOLD BY CITY
SELECT CITY,SUM(QTY) AS TOTAL_QTY FROM SALESDATA
GROUP BY  CITY
ORDER BY SUM(QTY) DESC
LIMIT 1,1;
-- WRITE A QUERRY TO GET LOWEST RECORD PRESENT IN THE CITY
SELECT CITY,COUNT(ID) TOTAL_RECORD FROM SALESDATA
GROUP BY CITY
ORDER BY COUNT(ID) ASC
LIMIT 1;
SELECT CITY,MAX(QTY) AS MAX_QTY FROM SALESDATA
GROUP BY CITY;
SELECT CITY,SUM(QTY) AS TOTAL_QTY FROM SALESDATA
GROUP BY CITY;
SELECT CITY,SUM(QTY) AS TOTAL_QTY FROM SALESDATA
WHERE CITY!="BOSTON"
GROUP BY CITY;
SELECT CITY,SUM(QTY) FROM SALESDATA
WHERE CITY!="NEW YORK"
GROUP BY CITY;
SELECT CITY,SUM(QTY) AS TOTAL_QTY FROM SALESDATA
WHERE QTY>200
GROUP BY CITY;
SELECT CITY,SUM(QTY) AS TOTAL_QTY FROM  SALESDATA
GROUP BY CITY
HAVING SUM(QTY)>4000;
SELECT CITY,SUM(QTY) FROM SALESDATA
WHERE CITY="BOSTON"
GROUP BY CITY
HAVING SUM(QTY)>2000;
SELECT CITY,SUM(QTY) AS TOTAL_QTY FROM SALESDATA
WHERE CITY!="BOSTON"
GROUP BY CITY
HAVING SUM(QTY)>3000;

SELECT CITY,SUM(UNITPRICE) AS TOTAL_UNITPRICE FROM SALESDATA
WHERE CITY!="NEW YORK"
GROUP BY  CITY
ORDER BY SUM(UNITPRICE) DESC
LIMIT 1;

SELECT CITY,SUM(UNITPRICE) FROM SALESDATA
WHERE CITY!="LOS ANEGELS"
GROUP BY CITY
ORDER BY SUM(UNITPRICE) ASC
LIMIT 1;
-------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT FOODSALES.ID,FOODSALES.CITY,SDATA.SALESAMOUNT FROM FOODSALES LEFT JOIN SDATA ON FOODSALES.ID=SDATA.ID;
SELECT SDATA.ID,SDATA.SALESTEAM,FOODSALES.QTY FROM SDATA LEFT JOIN FOODSALES ON SDATA.ID=FOODSALES.ID;
SELECT SDATA.ID,SDATA.PRODUCT,FOODSALES.QTY FROM SDATA LEFT JOIN FOODSALES ON SDATA.ID=FOODSALES.ID
WHERE PRODUCT<>"BUS";
SELECT FOODSALES.ID,FOODSALES.CITY,SDATA.SALESAMOUNT FROM FOODSALES RIGHT JOIN SDATA ON SDATA.ID=FOODSALES.ID;
SELECT FOODSALES.ID,FOODSALES.CITY,SDATA.SALESAMOUNT FROM FOODSALES INNER JOIN SDATA ON SDATA.ID=FOODSALES.ID;

-- UNION---
SELECT ID FROM FOODSALES UNION SELECT ID FROM SDATA;
USE STUDB;
SELECT * FROM SALESDATA; 
-- UNION ALL--
SELECT ID FROM FOODSALES UNION ALL SELECT ID FROM SDATA; 
SELECT * FROM FOODSALES FS LEFT JOIN SDATA SD ON FS.ID=SD.ID
UNION ALL
SELECT * FROM FOODSALES FS RIGHT JOIN SDATA SD ON FS.ID=SD.ID;
SELECT * FROM FOODSALES FS LEFT JOIN SDATA SD ON FS.ID=SD.ID
UNION
SELECT * FROM FOODSALES FS RIGHT JOIN SDATA SD ON FS.ID=SD.ID;
SELECT * FROM SDATA;
SELECT * FROM FOODSALES;
-------------------------------------------------------------------------------------------------------------------------------------------------------
-------------- FUNCTION----------------
SELECT CONCAT(REGION,"-",CITY) AS FULLNAME FROM FOODSALES;
SELECT CITY,UPPER(CITY) FROM FOODSALES;
-- WRITE A QUERRY TO COMBINE REGION,CITY AND CATEGORY IN A ONE COLUMNAS A UPPERCASE -AS A SAPARATER
SELECT UPPER(CONCAT(REGION,"-",CITY,"-",CATEGORY))  FROM FOODSALES;
SELECT REGION,LOWER(REGION) FROM FOODSALES;
SELECT REGION,LOWER(REGION) REGION,LOWER(CITY) FROM FOODSALES;
SELECT CITY,LENGTH(CITY) FROM FOODSALES;
-- WRITE A QUERRY TO GET ALL DATA WHERE LEGHT OF CITY>7
SELECT * FROM FOODSALES
WHERE LENGTH(CITY)>7;
SELECT TRIM(LENGTH("  SHREE"));
SELECT TRIM("  SHREE");
SELECT CITY,LEFT(CITY,2) FROM FOODSALES;
-- WRITE A QUERRY TO GET WHERE CITY SHOULD START WITH N
SELECT *FROM FOODSALES
WHERE LEFT(CITY,1)="N";
SELECT CITY,RIGHT(CITY,2) FROM FOODSALES;
SELECT CITY,MID(CITY,3,2) FROM FOODSALES;
SELECT REGION,REPLACE(REGION,"East","North") FROM FOODSALES;
SELECT CITY,INSERT(CITY,2,1,"A") FROM FOODSALES;
SELECT CITY,INSERT(CITY,2,2,"AS") FROM FOODSALES;
SELECT CITY,POSITION("S" IN CITY) FROM FOODSALES;
-----------------------------------------------------------------------------------------
-- DATE FUNCTIONS--
-- CURRENT_DATE
SELECT DATE,DAY(DATE) FROM SALESDATA;

-- WRITE A QUERY TO GET ALL THE DATA OF EVERY MONTH 10.
SELECT * FROM SALESDATA
WHERE DAY(DATE)=10;

-- MONTH
SELECT DATE,MONTH(DATE) FROM SALESDATA;
-- WRITE A QUERY TO GET ALL THE DATA OF MARCH.
SELECT * FROM SALESDATA
WHERE MONTH(DATE)="3";
-- WRITE A QUERY TO GET ALL THE DATA OF HEIGTHER MONTH DOC OR 24TH DATE DATA.
SELECT * FROM SALESDATA
WHERE MONTH(DATE)=12 OR DAY(DATE)=24;

-- YEAR
-- WRITE A QUERY TO GET ONLY 2023 DATA
SELECT * FROM SALESDATA
WHERE YEAR(DATE)=2023;
-- WRITE A QUERY TO GET MARCH 2022 DATA.
SELECT * FROM SALESDATA
WHERE YEAR(DATE)=2022 AND MONTH(DATE)=3;

-- QUATER
-- WRITE A QUERY TO GET 4TH QUATER IN THE TABLE.
SELECT * FROM SALESDATA
WHERE QUARTER(DATE)=4;

SELECT DATE,QUARTER(DATE) FROM SALESDATA;

SELECT * FROM SALESDATA
WHERE QUARTER(DATE)=4 AND YEAR(DATE)=2023;

-- HOUR
SELECT NOW();
SELECT HOUR(NOW());
SELECT MINUTE(NOW());
SELECT SECOND(NOW());

-- DAY_NAME
SELECT DATE,DAYNAME(DATE) FROM SALESDATA;
SELECT DATE,MONTHNAME(DATE) FROM SALESDATA;

-- WRITE A QUERY TO GET DATE OF FRIDAY
SELECT * FROM SALESDATA
WHERE DAYNAME(DATE)="Friday";

-- WRITE A QUERY TO GET MONDAY DATE IN DOC 2023
SELECT * FROM SALESDATA
WHERE DAYNAME(DATE)="MONDAY" AND MONTH(DATE)=12 AND YEAR(DATE)=2023;

-- WEEK OF YEAR
SELECT WEEKOFYEAR(NOW());
-- WRITE A QUERY TO GET 30TH WEEK OF YEAR IN 2023
SELECT * FROM SALESDATA
WHERE WEEKOFYEAR(DATE)=30 AND YEAR(DATE)=2023;

-- WEEK OF DAY
SELECT WEEKDAY(DATE(NOW())) FROM SALESDATA;
-- WRITE A QUERY TO GET 130 DAY DATE IN THE YEAR 
SELECT * FROM SALESDATA
WHERE WEEKOFYEAR(DATE)=130; 

-- DATE DIFF()
SELECT DATEDIFF("2024-01-01","2024-05-14");

-- ADD DATE
SELECT DATE,ADDDATE(DATE,INTERVAL 5 DAY) FROM SALESDATA;
SELECT DATE,ADDDATE(DATE,INTERVAL 5 MONTH) FROM SALESDATA;
SELECT DATE,ADDDATE(DATE,INTERVAL 5 YEAR) FROM SALESDATA;

-- NUMBER FUNCTION
SELECT ABS(-10);

-- WRITE A QUERY TO CALCULATE THE TOTAL SALES
SELECT QTY,UNITPRICE,QTY*UNITPRICE,CEIL(QTY*UNITPRICE) AS CIEL,FLOOR(QTY*UNITPRICE) AS FLR FROM SALESDATA;

-- ROUND FUNCTION
SELECT ROUND(2.5456,2);

-- DIV
SELECT 3/2;
SELECT 3 DIV 2;

-- MOD FUNCTION
SELECT MOD(5,2);
SELECT * FROM FOODSALES;

-- WRITE A QUERY TO GET EVEN NUMBER
SELECT * FROM FOODSALES
WHERE MOD(ID,2)=0;

-- WRITE A QUERY TO GET ODD NUMBER
SELECT * FROM FOODSALES
WHERE MOD(ID,2)<>0;

-- POWER
SELECT POW(2,3);

-- SQRT
SELECT SQRT(5);

-- WRITE A QUERY TO GET 35TH HIGHEST QTY
SELECT * FROM SALESDATA
ORDER BY QTY DESC
LIMIT 34,1;
----------------------------------------------------------------
-- WINDOW / ANALYTICAL FUNCTION
--- ROW NUMBER SYNTAX -------
SELECT CITY,QTY,ROW_NUMBER() OVER (ORDER BY QTY DESC) AS R_N FROM SALESDATA;
SELECT CITY,QTY,RANK() OVER (ORDER BY QTY DESC) AS RNK FROM SALESDATA;
SELECT CITY,QTY,DENSE_RANK() OVER (ORDER BY QTY DESC) AS D_RNK FROM SALESDATA;

-- WRITE A QUERY TO GET 48TH HIGHEST QUANTITY DATA
SELECT * FROM(SELECT CITY,QTY,DENSE_RANK() OVER (ORDER BY QTY DESC) AS D_RNK FROM SALESDATA) TEMP
WHERE D_RNK=48;
-- WRITE A QUERY TO GET 
SELECT * FROM(SELECT CITY,QTY,DENSE_RANK() OVER (ORDER BY QTY DESC) AS D_RNK FROM SALESDATA) TEMP
WHERE D_RNK=81;
-- WRITE A QUERY TO GET 50TH LOWEST QUANTITY
SELECT * FROM(SELECT CITY,QTY,DENSE_RANK() OVER (ORDER BY QTY ASC) AS D_RNK FROM SALESDATA) TEMP
WHERE D_RNK=20;
-- WRITE A QUERY TO GET THE 12 HIGHEST QTY IN BOSTON.
SELECT * FROM(SELECT CITY,QTY,DENSE_RANK() OVER (ORDER BY QTY DESC) AS D_RNK FROM SALESDATA WHERE CITY="BOSTON") TEMP
WHERE D_RNK=12;
-- WRITE A QUERY TO GET 15 HIGHEST QTY FOR ALL CITY.
SELECT * FROM(SELECT CITY,QTY,DENSE_RANK() OVER (PARTITION BY CITY ORDER BY QTY DESC) AS D_RNK FROM SALESDATA) TEMP
WHERE D_RNK=5;
 
 --- LEAD----
SELECT DATE,QTY,LAG(QTY) OVER(ORDER BY DATE ASC) AS PREDAY FROM SALESDATA;
SELECT DATE,QTY,LAG(QTY,2) OVER(ORDER BY DATE ASC) AS PREDAY FROM SALESDATA;
-- WHERE THERE IS A NULL VALUE TO PUT 0
SELECT DATE,QTY,LAG(QTY,2,0) OVER(ORDER BY DATE ASC) AS PREDAY FROM SALESDATA;

--- LAG---
SELECT DATE,QTY,LEAD(QTY) OVER(ORDER BY DATE ASC) AS PREDAY FROM SALESDATA;
SELECT DATE,QTY,LEAD(QTY,2) OVER(ORDER BY DATE ASC) AS PREDAY FROM SALESDATA;
USE STDDB;
SELECT * FROM SALESDATA;

-- CTE=COMMON TABLE EXPRESSION
WITH BDATA AS(
SELECT * FROM SALESDATA
WHERE CITY="BOSTON"
)
SELECT * FROM SALESDATA;

WITH DR AS(
SELECT CITY,QTY,DENSE_RANK() OVER (ORDER BY QTY DESC) AS D_RNK FROM SALESDATA)
SELECT * FROM DR
WHERE D_RNK=81;

-- IF-ELSE OR CASES IN SQL
SELECT QTY,CASE
WHEN QTY>100 THEN "GOOD QTY"
ELSE "BAD QTY"
END AS STATUS
FROM SALESDATA;
-- IF THE QTY>150 GOOD QTY,QTY<100 BAD QTY,100=150 AVG QTY
SELECT QTY,CASE
WHEN QTY>150 THEN "GOOD QTY"
WHEN QTY<100 THEN "BAD QTY"
ELSE "AVERAGE QTY"
END AS STATUS
FROM SALESDATA;

-- WRITE A QUERY TO GET IS THE QTY>100 IN BOSTON IS GOOD QTY OR ELSE IT IS BAD QTY
WITH ST AS(
SELECT CITY,QTY,CASE
WHEN QTY>=100  AND CITY="BOSTON"THEN "GOOD QTY" 
ELSE "BAD QTY"
END AS STATUS
FROM SALESDATA)

SELECT * FROM ST
WHERE STATUS="GOOD QTY";

-- VIEWS------
-- CREATE VIEW VIEWNAME AS
-- SELECT SATEMENT
CREATE VIEW CQ AS
SELECT CITY,QTY FROM SALESDATA;

CREATE OR REPLACE VIEW CQ AS
SELECT REGION,CITY,QTY FROM SALESDATA;

SELECT * FROM CQ;

DROP VIEW BOSTDATA;

CREATE VIEW BOSTDATA AS
SELECT * FROM SALESDATA
WHERE CITY="BOSTON" AND QTY>100;

SELECT * FROM BOSTDATA;
USE STDDB;
SELECT * FROM SALESDATA;

--- BACKUP OR DUPLICATE TABLE ----
CREATE TABLE BPFOODSALES AS 
SELECT * FROM FOODSALES;

SELECT * FROM BPFOODSALES;

--- STORE PROCEDURE -----
--- SYNTAX
-- DELIMITER &&
-- CREATE PROCEDURE BDATA()
-- BEGIN
-- SELECT * FROM SALESDATA
-- WHERE CITY="BOSTON";
-- END &&               THE ENDING SATEMENT NOT USE 2 SEMICOLON SO WE CAN CREATE OUR OWN ENDING STATEMENT
-- DELIMITER;
-- CALL BDATA()
DELIMITER &&
CREATE PROCEDURE BDATA()
BEGIN
SELECT * FROM SALESDATA;
END &&
DELIMITER ;
CALL BDATA();     -- ARGUMENTS

DELIMITER &&
CREATE PROCEDURE WITHPARM(CITYDATA VARCHAR(20))
BEGIN
SELECT * FROM SALESDATA
WHERE CITY=CITYDATA;
END &&
DELIMITER ;
CALL WITHPARM("NEW YORK");
CALL WITHPARM("BOSTON");

-- CREATE A PROCEDURE WITH PARMATER GRETAER THAN QTY DATA
DELIMITER &&
CREATE PROCEDURE QTYPARM(QTYDATA INT(20))
BEGIN
SELECT * FROM SALESDATA
WHERE QTY>QTYDATA;
END &&
DELIMITER ;
CALL QTYPARM(200);
DROP PROCEDURE BDATA;
USE STDDB;
SELECT * FROM SALESDATA;

-- FORIGN KEY----
CREATE TABLE COURSE (
ID INT PRIMARY KEY,
NAME VARCHAR(20)
)
SELECT * FROM COURSE;
INSERT INTO COURSE VALUES(1,"DA"),(2,"DS"),(3,"FS");
SELECT * FROM COURSE;

CREATE TABLE STUDENT(
ID INT PRIMARY KEY,
NAME VARCHAR(20),
CRID INT,
FOREIGN KEY(CRID) REFERENCES COURSE(ID)
)

SELECT * FROM STUDENT;
INSERT INTO STUDENT VALUES(1,"A",3);
INSERT INTO STUDENT VALUES(2,"b",1);
------------------------------------------------------------------------------------------------------------------------------------------------
----- DCL(DATA CONTROL LANGUAGE) COMMENTS------
CREATE USER 'JOHN'@'LOCALHOST' IDENTIFIED BY '1234';

GRANT SELECT,DELETE ON STDDB.FOODSALES TO 'JOHN'@'LOCALHOST';

REVOKE DELETE ON STDDB.FOODSALES FROM 'JOHN'@'LOCALHOST';

-------------------------------------------------------------------------------------------------------------------------------------------------
---------- SUB QUERIES----------
-- WRITE A QUERY TO GET MAXIMUM QTY DETAILS
SELECT * FROM FOODSALES
WHERE QTY=(SELECT MAX(QTY) FROM FOODSALES);
USE STDDB;
SELECT * FROM SALESDATA;
-- WRITE A QUERY TO GET ALL THE DATA WHERE THE QTY IS GREATER THAN AVAVERGE QTY
SELECT * FROM FOODSALES
WHERE QTY>(SELECT AVG(QTY) FROM FOODSALES);
----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------- NORMALIZATION---------------------
-- *1NF,*2NF,*3NF
------ INDEXING-----
CREATE INDEX NS ON FOODSALES(ID);
-- SYNTAX
SELECT * FROM FOODSALES
WHERE ID=7;







  
  

